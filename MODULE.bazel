# TODO: Migrate external dependencies from WORKSPACE to MODULE.bazel
# Bazel now uses Bzlmod by default to manage external dependencies.
#
# https://bazel.build/external/module
# https://registry.bazel.build/
module(name = "symplectix")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "zlib",
    build_file = "//compress/zlib:BUILD.zlib.bazel",
    sha256 = "9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23",
    strip_prefix = "zlib-1.3.1",
    urls = [
        "https://zlib.net/zlib-1.3.1.tar.gz",
        "https://storage.googleapis.com/mirror.tensorflow.org/zlib.net/zlib-1.3.1.tar.gz",
    ],
)

http_archive(
    name = "openssl",
    build_file = "//crypto/openssl:BUILD.openssl.bazel",
    integrity = "sha256-LopAsBl5r+i+C7+z3l3BxnCf7bRtbInBDaEUq1/D0oE=",
    strip_prefix = "openssl-3.3.2",
    urls = ["https://www.openssl.org/source/openssl-3.3.2.tar.gz"],
)

# Constraint values for specifying platforms and toolchains
bazel_dep(name = "platforms", version = "0.0.10")

# Common functions and rules for Bazel
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Libraries and rules for constructing rules and BUILD files
bazel_dep(name = "aspect_bazel_lib", version = "2.9.1")

bazel_lib = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")
bazel_lib.jq()
bazel_lib.yq()
use_repo(
    bazel_lib,
    "jq_toolchains",
    "yq_toolchains",
)

bazel_dep(name = "rules_multitool", version = "0.15.0")

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools/multitool:multitool.lock.json")
use_repo(multitool, "multitool")

# Prebuilt binaries for buildifier and buildozer
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1", dev_dependency = True)

# Protocol Buffers - Google's data interchange format
bazel_dep(name = "protobuf", version = "28.2")

# Pre-built protoc binary toolchain for Bazel
#
# https://github.com/aspect-build/toolchains_protoc/releases
bazel_dep(name = "toolchains_protoc", version = "0.3.3")

# Build Protobuf and gRPC code from proto_library
bazel_dep(name = "rules_proto_grpc", version = "5.0.0")
# bazel_dep(name = "rules_proto_grpc_doc", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_grpcgateway", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_buf", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_cc", version = "<version number here>")
# bazel_dep(name = "rules_proto_grpc_go", version = "<version number here>")

# Non-hermetic C++ rules
#
# An auto-detecting toolchain that expects to find tools installed on the host machine.
# bazel_dep(name = "rules_cc", version = "0.0.9")

# Build rules for interfacing with "foreign" (non-Bazel) build systems
# (CMake, configure-make, GNU Make, boost, ninja, Meson).
bazel_dep(name = "rules_foreign_cc", version = "0.12.0")

# Perl rules, to build OpenSSL
bazel_dep(name = "rules_perl", version = "0.2.3.bcr.1")

# Rules for creating packages (zip, tar, deb, rpm, ...)
bazel_dep(name = "rules_pkg", version = "1.0.1")

# Rust rules for Bazel
bazel_dep(name = "rules_rust", version = "0.52.0")

# Go rules for Bazel
bazel_dep(name = "rules_go", version = "0.50.1")

# Generate BUILD.bazel for Bazel
#
# It natively supports Go and protobuf, and it may be extended
# to support new languages and custom rule sets.
bazel_dep(name = "gazelle", version = "0.39.1")

# Rules for building OCI containers
bazel_dep(name = "rules_oci", version = "2.0.0")

# Validate the structure of container images
bazel_dep(name = "container_structure_test", version = "1.19.1")

RUST_EDITION = "2021"

RUST_VERSION = "1.81.0"

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    versions = [
        # No idea why but mixing versions confuses rust-analyzer.
        RUST_VERSION,
        # https://github.com/oxalica/rust-overlay/tree/master/manifests/nightly
        # "nightly/2024-09-01"
    ],
)
use_repo(rust, "rust_toolchains")

register_toolchains(
    "@rust_toolchains//:all",
    "//protobuf/prost:prost_toolchain",
)

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate", isolate = True)

# Raw bindings to platform APIs
crate.spec(
    package = "libc",
    version = "0.2",
)

# Link to a libz (zlib)
crate.spec(
    features = ["libc"],
    package = "libz-sys",
    version = "1.1",
)
crate.annotation(
    crate = "libz-sys",
    gen_build_script = "off",
    deps = ["@zlib"],
)

# OpenSSL bindings for Rust
crate.spec(
    package = "openssl",
    version = "0.10.64",
)
crate.spec(
    package = "openssl-sys",
    version = "0.9.101",
)
crate.annotation(
    build_script_data = [
        "@openssl//:openssl_dir",
        "@openssl//:openssl",
    ],
    # https://github.com/sfackler/rust-openssl/tree/master/openssl-sys/build
    build_script_data_glob = ["build/**/*.c"],
    build_script_env = {
        "OPENSSL_DIR": "$(execpath @openssl//:openssl_dir)",
        "OPENSSL_STATIC": "1",
    },
    crate = "openssl-sys",
    data = ["@openssl"],
    deps = ["@openssl"],
)

# Serializing and Deserializing data structures
crate.spec(
    features = ["derive"],
    package = "serde",
    version = "1",
)

# Futures extensions
crate.spec(
    package = "futures",
    version = "0.3",
)

# Async runtime
# crate.spec(
#     features = ["full", "tracing"],
#     package = "tokio",
#     version = "1.40",
# )
crate.spec(
    features = ["full"],
    package = "tokio",
    version = "1.40",
)

# Tracing
crate.spec(
    package = "tracing",
    version = "0.1",
)
crate.spec(
    features = ["env-filter"],
    package = "tracing-subscriber",
    version = "0.3",
)
# crate.spec(
#     package = "console-subscriber",
#     version = "0.4",
# )

# Protobuf support for Rust
crate.spec(
    package = "prost",
    version = "0.13",
)
crate.spec(
    package = "prost-types",
    version = "0.13",
)
crate.spec(
    package = "prost-reflect",
    version = "0.14",
)
crate.spec(
    package = "tonic",
    version = "0.12",
)
crate.spec(
    package = "tonic-build",
    version = "0.12",
)
crate.spec(
    package = "tonic-types",
    version = "0.12",
)
crate.spec(
    package = "tonic-health",
    version = "0.12",
)
crate.spec(
    package = "tonic-reflection",
    version = "0.12",
)

# Proroc plugins for Prost/Tonic
crate.spec(
    package = "protoc-gen-prost",
    version = "0.4",
)
crate.annotation(
    crate = "protoc-gen-prost",
    gen_binaries = ["protoc-gen-prost"],
)
crate.spec(
    package = "protoc-gen-tonic",
    version = "0.4",
)
crate.annotation(
    crate = "protoc-gen-tonic",
    gen_binaries = ["protoc-gen-tonic"],
)

# Small vectors store a certain number of elements inline, and fall back to the heap
# for larger allocations. This can be a useful optimization for improving cache locality
# and reducing allocator traffic for workloads that fit within the inline buffer.
crate.spec(
    features = [
        "std",
        "serde",
    ],
    package = "smallvec",
    version = "2.0.0-alpha.7",
)

# A tree-sitter binding
#
# https://tree-sitter.github.io/tree-sitter/
crate.spec(
    package = "tree-sitter",
    version = "0.24",
)
crate.spec(
    package = "tree-sitter-cli",
    version = "0.24",
)
crate.annotation(
    crate = "tree-sitter-cli",
    gen_binaries = ["tree-sitter"],
)

# Rust grammar for tree-sitter
crate.spec(
    package = "tree-sitter-rust",
    version = "0.23",
)

# Arguments parsing
crate.spec(
    features = ["derive"],
    package = "clap",
    version = "4.5",
)

# A collection of numeric types and traits
crate.spec(
    package = "num",
    version = "0.4",
)

# Includes formatters and parsers for std::time::SystemTime and std::time::Duration
crate.spec(
    package = "humantime",
    version = "2",
)

# Handling date and time
crate.spec(
    package = "time",
    version = ">=0.3.35",
)
# crate.spec(
#     package = "jiff",
# )
# crate.spec(
#     package = "chrono",
#     version = "0.4",
# )

# Result/Error helpers
crate.spec(
    package = "anyhow",
    version = "1",
)
crate.spec(
    package = "thiserror",
    version = "1",
)

# Generate structures which behave like a set of bitflags
crate.spec(
    package = "bitflags",
    version = "2",
)

# Temporary files and directories
crate.spec(
    package = "tempfile",
    version = "3",
)

# Random number generator
crate.spec(
    package = "rand",
    version = "0.8",
)

# For testing
crate.spec(
    package = "quickcheck",
    version = "1",
)
crate.spec(
    package = "quickcheck_macros",
    version = "1",
)
crate.spec(
    features = ["derive"],
    package = "arbitrary",
    version = "1",
)
crate.spec(
    package = "libfuzzer-sys",
    version = "0.4.0",
)

# Generates a repo @crates from the defined spec tags.
crate.from_specs()
use_repo(crate, "crates")

GO_VERSION = "1.23.2"

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = GO_VERSION)

# TODO: Setup nogo
# go_sdk.nogo(
#     nogo = "//tools/nogo",
#     includes = [
#         "//:__subpackages__",
#         "@my_own_go_dep//logic:__pkg__",
#     ],
#     excludes = [
#         "//third_party:__subpackages__",
#     ],
# )

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
use_repo(
    go_deps,
    # "org_golang_x_exp",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_base_debian12_nonroot",
    digest = "sha256:c3584d9160af7bbc6a0a6089dc954d0938bb7f755465bb4ef4265aad0221343e",
    image = "gcr.io/distroless/base-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
oci.pull(
    name = "distroless_cc_debian12_nonroot",
    digest = "sha256:fe61a509ada74719dbab670d4c0d127bd9b2e0114d18d4bb0a3b25c5d6695a49",
    image = "gcr.io/distroless/cc-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(
    oci,
    "distroless_base_debian12_nonroot",
    "distroless_base_debian12_nonroot_linux_amd64",
    "distroless_base_debian12_nonroot_linux_arm64",
    "distroless_cc_debian12_nonroot",
    "distroless_cc_debian12_nonroot_linux_amd64",
    "distroless_cc_debian12_nonroot_linux_arm64",
)
